<?php

namespace Penderie\DefaultBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Siplec\UserBundle\Entity\User;

/**
 * DossierRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class DossierRepository extends EntityRepository
{
    /**
     * Retourne les dossiers pour la requete ajax necessaire à jqgrid trier selon la colonne
     *
     * @return array The entities.
     */
    public function getNbResultats(array $criteria, array $orderBy = null)
    {
    	return count($this->findBy($criteria));
    }
	/**
	 * Retourne toutes les places d'archives libres
	 * TODO : Test
	 */
	public function getAllStatuts(){
		return array('oui', 'non');
	}
	
    /**
     * Retourne les dossiers pour la requete ajax necessaire à jqgrid trier selon la colonne
     *
     * @return array The entities.
     */
    public function getSearch(array $criteria, array $orderBy = null, $limit = null, $offset = null)
    {
        return $this->findBy($criteria, $orderBy, $limit, ($offset-1)*$limit);
    }

    /**
     * Retourne le nombre de dossier réexpédiés pour la requete ajax necessaire à jqgrid
     *
     * @param array $criteria
     */
    public function getNbResultatsDossier(array $criteria, User $user)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
    	->where('d.dateReceptionAdequation like :dateReceptionAdequation	')
    	->andwhere('d.utilisateurDossier = :utilisateurDossier')
    	->setParameter('dateReceptionAdequation', (new \DateTime(date('Y-m-d')))->format('Y-m-d')."%")
    	->setParameter('utilisateurDossier', $user);
    	if($criteria)
    	{
    		foreach($criteria as $key =>$value)
    		{
    			$query->andwhere('d.'.$key.' like :'.$key);
    			$query->setParameter($key, '%'.$value.'%');
    		}
    	}
    	return count($query->getQuery()->getResult());
    }
    /**
     * Retourne les dossiers réexpédiés pour la requete ajax necessaire à jqgrid trier selon la colonne
     *
     * @param array $criteria
     * @param array $orderBy
     * @param string $limit
     * @param string $offset
     */
    public function getSearchDossier(array $criteria, User $user, array $orderBy = null, $limit = null, $offset = null)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
    	->where('d.dateReceptionAdequation like :dateReceptionAdequation')
    	->andwhere('d.utilisateurDossier = :utilisateurDossier')
    	->setParameter('dateReceptionAdequation', (new \DateTime(date('Y-m-d')))->format('Y-m-d')."%")
    	->setParameter('utilisateurDossier', $user);
    	if($criteria)
    	{
    		foreach($criteria as $key =>$value)
    		{
    			$query->andwhere('d.'.$key.' like :'.$key);
    			$query->setParameter($key, '%'.$value.'%');
    		}
    	}
    	if($orderBy)
    	{
    		$key = key($orderBy);
    		$value = $orderBy[$key];
    		$query->orderBy('d.'.$key,$value);
    	}
    	if($limit && $offset)
    	{
    		$query->setMaxResults($limit);
    		$query->setFirstResult(($offset-1)*$limit);
    	}
    	return $query->getQuery()->getResult();
    }
    
    /**
     * Retourne le nombre de dossier réexpédiés pour la requete ajax necessaire à jqgrid
     * 
     * @param array $criteria
     */
    public function getNbResultatsReexpedition(array $criteria, User $user)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
    				->where('d.dateReexpedition like :dateReexpedition')
    				->andwhere('d.utilisateurReexpedition = :utilisateurReexpedition')
    				->setParameter('dateReexpedition', (new \DateTime(date('Y-m-d')))->format('Y-m-d')."%")
    				->setParameter('utilisateurReexpedition', $user);
    	if($criteria)
    	{
    		foreach($criteria as $key =>$value)
    		{
    			$query->andwhere('d.'.$key.' like :'.$key);
    			$query->setParameter($key, '%'.$value.'%');
    		}
    	}
    	return count($query->getQuery()->getResult());
    }
    /**
     * Retourne les dossiers réexpédiés pour la requete ajax necessaire à jqgrid trier selon la colonne
     * 
     * @param array $criteria
     * @param array $orderBy
     * @param string $limit
     * @param string $offset
     */
    public function getSearchReexpedition(array $criteria, User $user, array $orderBy = null, $limit = null, $offset = null)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
    				->where('d.dateReexpedition like :dateReexpedition')
    				->andwhere('d.utilisateurReexpedition = :utilisateurReexpedition')
    				->setParameter('dateReexpedition', (new \DateTime(date('Y-m-d')))->format('Y-m-d')."%")
    				->setParameter('utilisateurReexpedition', $user);
    	if($criteria)
    	{
			foreach($criteria as $key =>$value)
			{
				$query->andwhere('d.'.$key.' like :'.$key);
				$query->setParameter($key, '%'.$value.'%');
			}
    	}
    	if($orderBy)
    	{
    		$key = key($orderBy);
    		$value = $orderBy[$key];
    		$query->orderBy('d.'.$key,$value);
    	}
    	if($limit && $offset)
    	{
    		$query->setMaxResults($limit);
    		$query->setFirstResult(($offset-1)*$limit);
    	}
    	return $query->getQuery()->getResult();
    }
    
    /**
     * Retourne le nombre de dossier réexpédiés pour la requete ajax necessaire à jqgrid
     *
     * @param array $criteria
     */
    public function getNbResultatsRefus(array $criteria, User $user)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
    	->where('d.dateRefus like :dateRefus')
    	->andwhere('d.utilisateurRefus = :utilisateurRefus')
    	->andwhere('d.statut = :statutRefus')
    	->setParameter('dateRefus', (new \DateTime(date('Y-m-d')))->format('Y-m-d')."%")
    	->setParameter('utilisateurRefus', $user)
    	->setParameter('statutRefus', Dossier::STATUT_REFUSE_AUTOMATIQUE);
    	if($criteria)
    	{
    		foreach($criteria as $key =>$value)
    		{
    			$query->andwhere('d.'.$key.' like :'.$key);
    			$query->setParameter($key, '%'.$value.'%');
    		}
    	}
    	return count($query->getQuery()->getResult());
    }
    /**
     * Retourne les dossiers réexpédiés pour la requete ajax necessaire à jqgrid trier selon la colonne
     *
     * @param array $criteria
     * @param array $orderBy
     * @param string $limit
     * @param string $offset
     */
    public function getSearchRefus(array $criteria, User $user, array $orderBy = null, $limit = null, $offset = null)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
    	->where('d.dateRefus like :dateRefus')
    	->andwhere('d.utilisateurRefus = :utilisateurRefus')
    	->andwhere('d.statut = :statutRefus')
    	->setParameter('dateRefus', (new \DateTime(date('Y-m-d')))->format('Y-m-d')."%")
    	->setParameter('utilisateurRefus', $user)
    	->setParameter('statutRefus', Dossier::STATUT_REFUSE_AUTOMATIQUE);
    	if($criteria)
    	{
    		foreach($criteria as $key =>$value)
    		{
    			$query->andwhere('d.'.$key.' like :'.$key);
    			$query->setParameter($key, '%'.$value.'%');
    		}
    	}
    	if($orderBy)
    	{
    		$key = key($orderBy);
    		$value = $orderBy[$key];
    		$query->orderBy('d.'.$key,$value);
    	}
    	if($limit && $offset)
    	{
    		$query->setMaxResults($limit);
    		$query->setFirstResult(($offset-1)*$limit);
    	}
    	return $query->getQuery()->getResult();
    }
    
    /**
     * Retourne le dossier pere s'il existe un dossier passé en paramètre
     *
     * @param string $numDossier
     * @param int $idDossier
     * @return array The entities.
     */
    public function getPere($dossier)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
			    	->where('d.numDossier = :numDossier')
			    	->andwhere('d.typeDossier = :typeDossier')
			    	->setParameter('numDossier', $dossier->getNumDossier())
			    	->setParameter('typeDossier', Dossier::TYPE_DOSSIER_NOUVEAU);
    	if($dossier->getId()){
		    $query->andwhere('d.id != :idNum')
		    		->setParameter('idNum', $dossier->getId());
    	}
    	return $query->getQuery()->getOneOrNullResult();
    }
    
    /**
     * Retourne la première ligne d'un dossier à partir de son numéro de dossier et de statut "reçu"
     *
     * @param Dossier $numDossier
     * @return array The entities.
     */
    public function getFirstDossierByNumDossierAndStatutRecu($dossier)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
    		->where('d.numDossier = :numDossier')
    		->andwhere('d.statut = :statut')
    		->orderBy('d.id','ASC')
    		->setMaxResults(1)
    		->setParameter('numDossier', $dossier->getNumDossier())
    		->setParameter('statut', Dossier::STATUT_RECU);
    	return $query->getQuery()->getOneOrNullResult();
    }
    
    /**
     * Retourne la première ligne entière d'un dossier à partir de son numéro de dossier
     *
     * @param Dossier $numDossier
     * @return array The entities.
     */
    public function getFirstDossierByStatutRecuOrEnCours($dossier)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
    		->where('d.numDossier = :numDossier')
    		->andwhere('d.statut IN (:statut)')
    		->orderBy('d.id','ASC')
    		->setMaxResults(1)
    		->setParameter('numDossier', $dossier->getNumDossier())
    		->setParameter('statut', array(Dossier::STATUT_RECU,Dossier::STATUT_EN_COURS_DE_TRAITEMENT));
    	return $query->getQuery()->getOneOrNullResult();
    }    
    /**
     * Retourne les dossiers à traiter
     *
     * @return array les dossiers à traiter
     */
    public function getATraiter()
    {
    	$results = array();
    	
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$tmp = $repository->createQueryBuilder('d')
				    	->where('d.statut = :statut')
				    	->orderBy('d.numDossier', 'ASC')
				    	->groupBy('d.numDossier')
				    	->setParameter('statut', Dossier::STATUT_RECU)
				    	->getQuery()
				    	->getResult();
    	$results[] = array("Num archive",
    			"Num Dossier",
    			"Date reception"
    	);
    	foreach ($tmp as $dossier) {
    		$results[] = array(($dossier->getArchive())?$dossier->getArchive()->__toString():"",
			    				$dossier->getNumDossier(),
			    				$dossier->getDateReceptionAdequation()->format('d/m/Y')
			    		);
    	}
    	return $results;
    }
    /**
     * Retourne les dossiers refusé automatique et donc à traiter
     *
     * @return array les dossiers à traiter
     */
    public function getRefusAutomatiqueATraiter()
    {
    	$results = array();
    	$statutRefusAuto = $this->getEntityManager()->getRepository('PenderieDefaultBundle:StatutDossier')->find(Dossier::STATUT_REFUS_AUTOMATIQUE_EN_COURS);
    	
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$tmp = $repository->createQueryBuilder('d')
				    	->where('d.statut = :statut')
				    	->orderBy('d.archive', 'ASC')
				    	->setParameter('statut', $statutRefusAuto)
				    	->getQuery()
				    	->getResult();
    	$results[] = array("Num archive",
    			"Num Dossier",
    			"Date reception"
    	);
    	foreach ($tmp as $dossier) {
    		$results[] = array($dossier->getArchive()->__toString(),
			    				$dossier->getNumDossier(),
			    				$dossier->getDateReceptionAdequation()->format('d/m/Y')
			    		);
    	}
    	return $results;
    }
    
    /**
     * Retourne le dernier dossier pour lequel on trouve un statut et un numdossier correspondant
     * 
     * @param unknown $numDossier
     * @param unknown $typeCourrier type de courrier pour lequel on recherche un dossier
     * 
     * return Dossier
     */
    public function getLastDossierByTypeCourrierAndNumDossier($numDossier, $typeCourrier){
    	switch ($typeCourrier) {
    		case Courrier::TYPE_ENVOI_NOUVEAU:
    			$type = Dossier::TYPE_DOSSIER_NOUVEAU;
    		break;
    		case Courrier::TYPE_ENVOI_COMPLEMENT:
    			$type = Dossier::TYPE_DOSSIER_COMPLEMENT;
    		break;
    	}
    	
    	$dossiers = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier')
			    	->createQueryBuilder('d')
			    	->where('d.numDossier = :numDossier')
			    	->andwhere('d.typeDossier = :typeDossier')
			    	->orderBy('d.id', 'DESC')
			    	->setMaxResults(1)
			    	->setParameter('numDossier', $numDossier)
			    	->setParameter('typeDossier', $type)
			    	->getQuery()
    				->getResult();
    	if (isset($dossiers[0])) {
	    	return $dossiers[0];
    	}else{
    		return null;
    	}
    }
    
    /**
     * Retourne le dernier dossier pour lequel on trouve un numdossier correspondant
     * 
     * @param unknown $numDossier
     * 
     * return Dossier
     */
    public function getLastDossierByNumDossier($numDossier){
    	$dossiers = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier')
			    	->createQueryBuilder('d')
			    	->where('d.numDossier = :numDossier')
			    	->orderBy('d.id', 'DESC')
			    	->setMaxResults(1)
			    	->setParameter('numDossier', $numDossier)
			    	->getQuery()
    				->getResult();
    	if (isset($dossiers[0])) {
	    	return $dossiers[0];
    	}else{
    		return null;
    	}
    }
    
    /**
     * Libere l'archive du dossier 
     * 
     * @param Dossier $dossier
     */
    public function libereArchive(Dossier $dossier)
    {
    	$archive = $dossier->getArchive();
    	if($archive != null)
    	{
    		$archive->setLibre(true);
    		$archive->setNumDossier(null);
    		
    		$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    		$query = $repository->createQueryBuilder('d')
	    		->update()
	    		->set('d.archive','null')
	    		->where('d.numDossier = :numDossier')
	    		->setParameter('numDossier', $dossier->getNumDossier());
    		return $query->getQuery()->execute();
    	}
    }
    
    /**
     * Ajoute les informations de reexpedition à tous les dossiers qui ont ce numéro de dossier
     * 
     * @param Dossier $dossier
     * @param User $utilisateur
     */
    
    public function setReexpeditionFamily(Dossier $dossier, User $utilisateur)
    {
		return $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier')
			->createQueryBuilder('d')
			->update()
			->set('d.utilisateurReexpedition', ':utilisateurReexpedition')
			->set('d.refRecall', ':refRecall')
			->set('d.dateReexpedition', ':dateReexpedition')
			->where('d.numDossier = :numDossier')
			->setParameter('numDossier', $dossier->getNumDossier())
			->setParameter('refRecall', $dossier->getRefRecall())
			->setParameter('dateReexpedition', new \DateTime())
			->setParameter('utilisateurReexpedition', $utilisateur)
			->getQuery()
			->execute();
    }
    
    /**
     * Retourne la dernière ligne d'un dossier à partir de son numéro de dossier et de son statut "incomplet"
     *
     * @param Dossier $numDossier
     * @return array The entities.
     */
    public function getLastDossierByNumDossierAndStatutIncomplet($numDossier)
    {
    	$repository = $this->getEntityManager()->getRepository('PenderieDefaultBundle:Dossier');
    	$query = $repository->createQueryBuilder('d')
    	->where('d.numDossier = :numDossier')
    	->andwhere('d.statut = :statut')
    	->orderBy('d.id','DESC')
    	->setMaxResults(1)
    	->setParameter('numDossier', $numDossier)
    	->setParameter('statut', Dossier::STATUT_INCOMPLET);
    	return $query->getQuery()->getOneOrNullResult();
    }
}
